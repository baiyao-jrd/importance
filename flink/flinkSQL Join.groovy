// 1. 双流join出现的两个问题? 
1.1 A、B两条流进行关联, 如果说到达时机不一样, 可能就会出现两条流里面相同关联条件的数据关联不上的问题?
1.2 A流先到了, 但是B流中相同关联条件的数据一直没到, 那么A流中的数据要一直等待还是用null补全数据往下发?  

上面的两个问题直接和
    数据质量、数据延迟
相关.

// 2. 双流join的底层原理?
左流和右流各有一个状态, 分别用来保存自己流中的数据. 

左流数据到达的时候, 会将状态保存到左流的状态中, 然后到右流的状态中做join. join完之后将数据发送到下游. 
右流数据到达的时候, 会将数据保存到右流的状态中, 然后到左流的状态中做join. join完之后将数据发送到下游.

完成双流join.

// 3. flinkSQL的几种join类型?
3.1 regular join            -> 普通join
3.2 interval join           -> 时间区间join
3.3 temporal join           -> 时态/快照join
3.4 lookup join             -> 维表join
3.5 array expansion         -> 数组炸裂
3.6 table function join     -> 表函数join
3.7 window join             -> 窗口join

// 4. regular join
4.1 分类
inner join 
outer join 
    -> left join
    -> right join
    -> full join 


4.2 inner join
只有左右两条流都关联上了, 才输出结果+[L, R], 永远关联不上就永远不输出.

4.2.1 举例

订单表(A表)                              支付表(B表)                    汇总表(C表)            
order_id    timestamp                   order_id    pay_money          order_id     timestamp               pay_money   
1001        2022-10-10 10:00:00         1002        100                1002         2022-10-10 10:01:02     100
1002        2022-10-10 10:01:02

A、B表任何一个有数据到达, 都会主动到另一个表中进行关联查询, 看看是否有匹配的数据.

由于是inner join, 所以A表1001到的时候, 去B表关联, 未匹配到数据, 所以不输出结果.

B表1002到的时候, 去A表关联, 未匹配到数据, 所以不输出结果.

A表1002到的时候, 去B表关联, 匹配到数据, 输出结果+[1002, 2022-10-10 10:01:0, 100].

订单表(A表)                              支付表(B表)                    汇总表(C表)            
order_id    timestamp                   order_id    pay_money          order_id     timestamp               pay_money   
1001        2022-10-10 10:00:00         1002        100                1002         2022-10-10 10:01:02     100
1002        2022-10-10 10:01:02         1001        80                 1001         2022-10-10 10:00:00     80

B表1001到的时候, 去A表关联, 匹配到数据, 输出结果+[1001, 2022-10-10 10:00:00, 80].


// inner join 不会产生回撤流. 


4.3 left join
两流关联的时候, 左流无论是否关联到右边流中的数据, 都会输出结果.

右流先到, 什么也不输出. 

如果左流先到, 输出+[L, null]. 右流数据到的时候, 会去左流关联, 发现之前输出过补空的数据, 产生回撤流. 
-[L, null], 接着重新输出关联后的数据+[L, R].

订单表(A表)                              支付表(B表)                    汇总表(C表)            
order_id    timestamp                   order_id    pay_money          order_id     timestamp               pay_money   
1001        2022-10-10 10:00:00                                        1001         2022-10-10 10:00:00     null
1002        2022-10-10 10:01:02         1002        100                1002         2022-10-10 10:01:02     100

表A的1001先到的时候, 去B表关联查询, 未关联到数据. 由于是left join, 所以输出+[1001, 2022-10-10 10:00:00, null].

表B的1002到了之后, 去A表关联查询, 未关联到数据. 由于是left join, 所以什么也不输出.

表A的1002到了之后, 去B表关联查询, 关联到数据, 所以输出+[1002, 2022-10-10 10:01:02, 100].

订单表(A表)                              支付表(B表)                    汇总表(C表)            
order_id    timestamp                   order_id    pay_money          order_id     timestamp               pay_money   
1001        2022-10-10 10:00:00                                        1001         2022-10-10 10:00:00     null        +I
1002        2022-10-10 10:01:02         1002        100                1002         2022-10-10 10:01:02     100         +I


                                        1001        80                 1001         2022-10-10 10:00:00     null        -D
                                                                       1001         2022-10-10 10:00:00     80          +I


表B的1001到达之后, 会去表A关联查询, 发现之前1001输出过结果, 但是发现结果中的表B数据是null, 此时产生回撤流-D[1001, 2022-10-10 10:00:00, null], 
然后重新输出完整结果, +I[1001, 2022-10-10 10:00:00, 80].                                                                      

4.3 right join
两流关联的时候, 右流无论是否关联到左边流中的数据, 都会输出结果.

左流先到, 什么也不输出. 

如果右流先到, 输出+[null, R]. 左流数据到的时候, 会去右流关联, 发现之前输出过补空的数据, 产生回撤流. 
-[null, R], 接着重新输出关联后的数据+[L, R].

订单表(A表)                              支付表(B表)                    汇总表(C表)            
order_id    timestamp                   order_id    pay_money          order_id     timestamp               pay_money   
                                        1001        80                 1001         null                    80
1002        2022-10-10 10:01:02         1002        100                1002         2022-10-10 10:01:02     100

表B的1001先到的时候, 去A表关联查询, 未关联到数据. 由于是right join, 所以输出+[1001, null, 80].

表A的1002到了之后, 去B表关联查询, 未关联到数据. 由于是right join, 所以什么也不输出.

表B的1002到了之后, 去A表关联查询, 关联到数据, 所以输出完整结果+[1002, 2022-10-10 10:01:02, 100].

订单表(A表)                              支付表(B表)                    汇总表(C表)            
order_id    timestamp                   order_id    pay_money          order_id     timestamp               pay_money   
                                        1001        80                 1001         null                    80          +I
1002        2022-10-10 10:01:02         1002        100                1002         2022-10-10 10:01:02     100         +I


1001        2022-10-10 10:00:00                                        1001         null                    80          -D
                                                                       1001         2022-10-10 10:00:00     80          +I


表A的1001到达之后, 会去表B关联查询, 发现之前1001输出过结果, 但是发现结果中的表A数据是null, 此时产生回撤流-D[1001, null, 80], 
然后重新输出完整结果, +I[1001, 2022-10-10 10:00:00, 80].   


4.4 full join
左右两条流, 无论是否关联到另一条流的数据都会输出结果. 

左流先到, 输出+[L, null]. 或者右流先到, 输出+[null, R].

两条流关联上之后产生回撤流, 输出完整结果+[L, R].

订单表(A表)                              支付表(B表)                    汇总表(C表)            
order_id    timestamp                   order_id    pay_money          order_id     timestamp               pay_money   
                                        1001        80                 1001         null                    80          +I
1002        2022-10-10 10:01:02                                        1002         2022-10-10 10:01:02     null        +I

1001        2022-10-10 10:00:00         1002        10                 1001         null                    80          -D
                                                                       1001         2022-10-10 10:00:00     80          +I
                                                                       1002         2022-10-10 10:01:02     null        -D
                                                                       1002         2022-10-10 10:01:02     100         +I

无论哪儿条流数据先到, 都会主动到另一张表里面关联查询, 未匹配到数据, 由于是full join, 依然会发送结果, 不过是缺失字段会用null补全.

表A的1001到达之后, 会去表B关联查询, 发现之前1001输出过结果, 但是发现结果中的表A数据是null, 此时产生回撤流-D[1001, null, 80], 
然后重新输出完整结果, +I[1001, 2022-10-10 10:00:00, 80].   

表B的1002到达之后, 会去表A关联查询, 发现之前1002输出过结果, 但是发现结果中的表B数据是null, 此时产生回撤流-D[1001, 2022-10-10 10:01:02, null], 
然后重新输出完整结果, +I[1001, 2022-10-10 10:01:02, 100].  